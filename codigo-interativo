import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

TOKEN = "7919229005:AAHMx5VfoXpIciCMxYwEFaZgXq6J29kbbI4"


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        f"Ol√°, {user.mention_html()}! Bem-vindo ao bot oficial para f√£s da FURIA CS! üñ§ü§ç\n\n"
        "O que voc√™ gostaria de saber hoje?\n"
        "Use /ajuda para ver todos os comandos dispon√≠veis."
    )


# /ajuda
async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Aqui est√£o os comandos que voc√™ pode usar:\n\n"
        "/agenda - Pr√≥ximos jogos da FURIA\n"
        "/resultados - Resultados recentes\n"
        "/jogadores - Informa√ß√µes sobre o elenco atual\n"
        "/noticias - √öltimas not√≠cias do time\n"
        "/estatisticas - Estat√≠sticas do time e jogadores\n"
        "/loja - Link para a loja oficial\n"
        "/lembrete - Configurar lembretes de jogos"
    )


# /agenda
async def agenda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ *PR√ìXIMOS JOGOS DA FURIA*\n\n"
        "‚Ä¢ 28/04 - FURIA vs Team Liquid - ESL Pro League\n"
        "‚Ä¢ 30/04 - FURIA vs NAVI - ESL Pro League\n"
        "‚Ä¢ 03/05 - FURIA vs MIBR - BLAST Premier\n\n"
        "Quer receber lembretes antes dos jogos? Use /lembrete",
        parse_mode='Markdown'
    )


# /resultados
async def resultados(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üèÜ *RESULTADOS RECENTES*\n\n"
        "‚Ä¢ 07/04 - FURIA 1-2 Complexity (PGL Bucharest 2025)\n"
        "‚Ä¢ 08/04 - FURIA 2-0 Virtus Pro (PGL Bucharest 2025)\n"
        "‚Ä¢ 09/04 - FURIA 2-0 The MongolZ (PGL Bucharest 2025)\n",
        parse_mode='Markdown'
    )


# /jogadores
async def jogadores(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚≠ê KSCERATO", callback_data='jogador_kscerato')],
        [InlineKeyboardButton("üëë yuurih", callback_data='jogador_yuurih')],
        [InlineKeyboardButton("üî• molodoy", callback_data='jogador_molodoy')],
        [InlineKeyboardButton("üéØ FalleN", callback_data='jogador_FalleN')],
        [InlineKeyboardButton("üí™ YEKINDAR", callback_data='jogador_yekindar')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Escolha um jogador para ver mais informa√ß√µes:", reply_markup=reply_markup)


# callback jogadores
async def info_jogador(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'jogador_kscerato':
        await query.edit_message_text(
            "*KSCERATO (Kaike Cerato)*\n\n"
            "Fun√ß√£o: Rifler\n"
            "Idade: 25 anos\n"
            "Rating 2.0 (2024): 1.20\n"
            "Nacionalidade: Brasil üáßüá∑\n\n"
            "Um dos melhores jogadores do Brasil, conhecido por seu aim preciso e jogadas consistentes.",
            parse_mode='Markdown'
        )
    elif query.data == 'jogador_yuurih':
        await query.edit_message_text(
            "*yuurih (Yuri Santos)*\n\n"
            "Fun√ß√£o: Rifler/Lurker\n"
            "Idade: 25 anos\n"
            "Rating 2.0 (2024): 1.18\n"
            "Nacionalidade: Brasil üáßüá∑\n\n"
            "Conhecido por seu jogo inteligente e capacidade de clutch.",
            parse_mode='Markdown'
        )
    elif query.data == 'jogador_molodoy':
        await query.edit_message_text(
            "*molodoy (Danil Golubenko)*\n\n"
            "Fun√ß√£o: Entry Fragger\n"
            "Idade: 20 anos\n"
            "Rating 2.0 (2024): 1.10\n"
            "Nacionalidade: Cazaquist√£o\n\n"
            "Conhecido por seu estilo √∫nico de lideran√ßa e entradas.",
            parse_mode='Markdown'
        )
    elif query.data == 'jogador_FalleN':
        await query.edit_message_text(
            "*FalleN (Gabriel Toledo)*\n\n"
            "Fun√ß√£o: IGL/AWPer\n"
            "Idade: 33 anos\n"
            "Rating 2.0 (2024): 1.15\n"
            "Nacionalidade: Brasil üáßüá∑\n\n"
            "O sniper principal do time, conhecido por seus reflexos r√°pidos e tiros precisos.",
            parse_mode='Markdown'
        )
    elif query.data == 'jogador_yekindar':
        await query.edit_message_text(
            "*YEKINDAR (Mareks Gaƒºinskis)*\n\n"
            "Fun√ß√£o: Support/Rifler\n"
            "Idade: 25 anos\n"
            "Rating 2.0 (2024): 1.05\n"
            "Nacionalidade: Let√¥nia\n\n"
            "Jogador suporte que desempenha m√∫ltiplos pap√©is na equipe.",
            parse_mode='Markdown'
        )


# /noticias
async def noticias(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∞ *√öLTIMAS NOT√çCIAS DA FURIA CS*\n\n"
        "‚Ä¢ FURIA se classifica para as finais da ESL Pro League\n"
        "‚Ä¢ Time prepara bootcamp na Europa para o pr√≥ximo Major\n"
        "‚Ä¢ Em entrevista, FalleN fala sobre estrat√©gias para pr√≥ximos campeonatos\n\n"
        "Para mais not√≠cias, visite: https://x.com/FURIA",
        parse_mode='Markdown'
    )


# /loja
async def loja(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõí *LOJA OFICIAL DA FURIA*\n\n"
        "Visite nossa loja oficial para comprar camisetas, moletons e outros produtos exclusivos da FURIA:\n"
        "https://furia.gg",
        parse_mode='Markdown'
    )


# /estatisticas
async def estatisticas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìä *ESTAT√çSTICAS DA FURIA CS*\n\n"
        "‚Ä¢ Posi√ß√£o no ranking mundial: #8\n"
        "‚Ä¢ Vit√≥rias em 2024: 67%\n"
        "‚Ä¢ Mapas mais fortes: Mirage (75% win rate), Nuke (70% win rate)\n"
        "‚Ä¢ Jogador com mais MVP: KSCERATO (12)\n\n"
        "Para estat√≠sticas detalhadas, visite HLTV.org",
        parse_mode='Markdown'
    )


# /lembrete
async def configurar_lembrete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Sim, quero receber lembretes", callback_data='lembrete_sim')],
        [InlineKeyboardButton("N√£o, obrigado", callback_data='lembrete_nao')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Voc√™ gostaria de receber lembretes antes dos jogos da FURIA?",
        reply_markup=reply_markup
    )


# callback lembretes
async def processar_lembrete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'lembrete_sim':
        chat_id = query.message.chat_id
        await query.edit_message_text(
            "‚úÖ Perfeito! Voc√™ receber√° lembretes 1 hora antes de cada jogo da FURIA.\n"
            "Para cancelar este servi√ßo, use /cancelar_lembrete"
        )
    else:
        await query.edit_message_text("Ok! Se mudar de ideia, use o comando /lembrete")


# mensagens de texto n√£o reconhecidas
async def responder_mensagem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    texto = update.message.text.lower()

    if "oi" in texto or "ol√°" in texto:
        await update.message.reply_text("Ol√°, jogador! Como posso te ajudar hoje? Use /ajuda para ver os comandos dispon√≠veis.")
    elif "hor√°rio" in texto or "quando" in texto or "jogo" in texto:
        await agenda(update, context)
    elif "jogador" in texto or "elenco" in texto or "time" in texto:
        await update.message.reply_text("Para informa√ß√µes sobre o elenco atual, use o comando /jogadores")
    else:
        await update.message.reply_text("N√£o entendi o que voc√™ quer. Use /ajuda para ver os comandos dispon√≠veis.")


def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ajuda", ajuda))
    application.add_handler(CommandHandler("agenda", agenda))
    application.add_handler(CommandHandler("resultados", resultados))
    application.add_handler(CommandHandler("jogadores", jogadores))
    application.add_handler(CommandHandler("noticias", noticias))
    application.add_handler(CommandHandler("loja", loja))
    application.add_handler(CommandHandler("estatisticas", estatisticas))
    application.add_handler(CommandHandler("lembrete", configurar_lembrete))

    application.add_handler(CallbackQueryHandler(info_jogador, pattern='^jogador_'))
    application.add_handler(CallbackQueryHandler(processar_lembrete, pattern='^lembrete_'))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder_mensagem))

    print("Bot iniciado!")
    application.run_webhook(
    listen="0.0.0.0",
    port=443,
    webhook_url="https://<seiblitz>.pythonanywhere.com/<7919229005:AAHMx5VfoXpIciCMxYwEFaZgXq6J29kbbI4>/"
)

from bot import application  # Assumindo que seu bot esteja no arquivo bot.py

# WSGI callable
app = application



if __name__ == "__main__":
    main()
